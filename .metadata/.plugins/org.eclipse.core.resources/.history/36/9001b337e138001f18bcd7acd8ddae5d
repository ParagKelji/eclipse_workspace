package com.f8.test;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamsEx {

	class Product{
	    int id;
	    String name;
	    float price;
	    public Product(int id, String name, float price) {
	        this.id = id;
	        this.name = name;
	        this.price = price;
	    }
	    
	    @Override
	    public String toString() {
	        return "Product [id=" + id + ", name=" + name + ", price=" + price + "]\n";
	    }
	}
	
    public static void main(String[] args) {
    	StreamsEx streamsEx = new StreamsEx();
        List<Product> productsList = new ArrayList<Product>();
        //Adding Products
        productsList.add(streamsEx.new Product(1,"HP Laptop",25000f));
        productsList.add(streamsEx.new Product(2,"Dell Laptop",30000f));
        productsList.add(streamsEx.new Product(3,"Lenevo Laptop",28000f));
        productsList.add(streamsEx.new Product(4,"Sony Laptop",28000f));
        productsList.add(streamsEx.new Product(5,"Apple Laptop",90000f));
        List<Float> productPriceList2 = productsList.stream()
                                     .filter(p -> p.price > 30000)// filtering data
                                     .map(p -> p.price)        // fetching price
                                     .collect(Collectors.toList()); // collecting as list
        System.out.println("List of only prices less than 30000: "+ productPriceList2);
        List<Product> cheapProductsList = productsList.stream()
									 .filter(p -> p.price < 30000)// filtering data
									 .map(p -> p)        // fetching product optional while filtering out the whole object
									 .collect(Collectors.toList()); // collecting as list
		System.out.println("List of cheap products:\n"+ cheapProductsList);
		
		Stream.iterate(1, element -> element + 1)
        .filter(element -> element%9 == 0)
        .limit(5)
        .forEach(System.out::println);
		
		float totalPrice2 = productsList.stream()
                .map(product -> product.price)
                .reduce(0.0f,Float::sum);   // accumulating price, by referring method of Float class
        System.out.println("Total Price of all products: " + totalPrice2);
        
        String allProductsName = productsList.stream()
                .map(product -> product.name)
                .collect(Collectors.joining(", "));
        System.out.println("Names of all products: " + allProductsName);
        
        int maxId = productsList.stream()
                .map(product -> product.id)
                .reduce(0, Integer::max);
                //.reduce(0,Integer::count);   // accumulating price, by referring method of Float class
        System.out.println("Maximum value of id: " + maxId);
        Product productA = productsList.stream().max((product1, product2)->product1.price > product2.price ? 1: -1).get();
        System.out.println("Max price" + productA.price);
        // min() method to get min Product price
        Product productB = productsList.stream().min((product1, product2)->product1.price > product2.price ? 1: -1).get();
        System.out.println("Min price" + productB.price);
	}

}